03. 数组中重复的数字
    
    方法：set 
    1. set 添加新 element：   mySet.add(i);
    2. 判断是否存在某元素      mySet.has(i);
    
04. 二维数组的查找

    如何在数组中模拟（从“右上角”到“左下角”的查找）

05. 替换空格

    replace: " "  仅可替换第一个
    replaceAll: " " 可全部替换

    replace: /\s/g  全部可以
    repalceAll: /\s/g 全部可以
    

06. 从尾到头打印链表（返回数组）

    unshift

10. 斐波那契

    0    1    1    2    3    5    8.....
    0    1
    pre  cur  tmp                    n
         pre  cur
return        cur    

11. 青蛙跳台
   
    1     1      2      3      5......
    pre   cur    tmp
          pre    cur

return           cur


12. 旋转数组的最小值

    观察变化的特性

    在 javascript 中，数组的宽度表示为： numbers.length 没有括号


15. 二进制中 1 的数字

    如何把一个数字转化为与二进制有关？

    let str = num.toString(2);      转化为二进制字符串

16. 打印从1到最大的n位数
 
    通过n找到最大的n位数的数值，
    在循环将所有数字打印出来

17. 删除链表的节点

    1. 用 while 时注意 存在/不存在 节点下的两种情况判断条件：

    head && head.next && head.next.val == val

    head && head.next && head.next.val != val

21. 调整数组顺序使奇数位于偶数前面

    let i of nums

22. 链表中倒数第k个节点

    快慢双指针

24. 反转链表

    看懂代码，特别是等号前后的不同含义
    左边：指针名
    右边：数值（位置）
    
39. 数组中出现次数超过一半的数字

    投票法原理


40.最小的k个数

   如何从小到大进行排序

42. 连续子数组的最大和

   理解 其中的两句：
   1.  let res = nums[0];
   2. sum = Math.max(sum + i , i); （一旦变小，计算起始归零）


53 -在排序数组中查找数字 

53.  0～n-1中缺失的数字
     三种情况

57. 和为s的两个数字(递增数组)     只要是递增数组，就可以用二分法
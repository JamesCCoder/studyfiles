div p{
    descendant
}

div > p {
    child
}

div ~ p{
    genaral sibling
}

div + p{
    adjancent sibling
}

content model: height width --> (content)    padding  border(outline)  margin     

all   up right down left      up down / left right 


1. how to see the full codes of shorthands ?

2. what does width = 50 % mean ?                                                 parent width * 50 %
why does height = 100% NOT work? How to make it work?            enough, change body
how to get height 100% totally?                                  body 100%, html 100%

3. border-box  vs  content-box  (box-sizing)
in border-box width = content-box width + padding + border


4. what is semantic elements in html?

examples of non-semantic elements: <div> and <span> - Tells nothing about its content.
Many web sites contain HTML code like: <div id="nav"> <div class="header"> <div id="footer"> to indicate navigation, header, and footer.

In HTML there are some semantic elements that can be used to define different parts of a web page:  

<article>
<aside>
<details>
<figcaption>
<figure>
<footer>
<header>
<main>
<mark>
<nav>
<section>
<summary>
<time>


6. how to make list items in a line?                         li { display: inline-block }  

7. what would inline-block show?                       
blocks that would arrange in a line
blocks accept padding,margin,width,height 

8. display: none     vs       visibility: hidden
9. block element     vs       inline element
10. how to eliminate the underscore of link ?                        a { text-decoration : none }
10.1 how to eliminate the dots befor list ?                          ul {list-style-type : none}
11. how to make inline(inline-box) vertical center?                              vertical-align : middle
11.1 make center in another way?                                display:flex  align-items:center justify-content:center

12. pseudo classes
    a: link visited hover active

12.1 pseudo class define the style of a special state of an element
     pseudo element define the style of a specific part of an element      p::first-letter

13. how to setup a buttom-line for a link when hovering over it?           border-buttom: 2px solid red

14. the setup rule for border?                                             border: 2px solid green

15. how to setup a img in background?                                       background/background-mage:url()       

16. how many classes could one tag have?                                     as many as it could

17. how many categraries of selector? which one is the best?                 three: class, id, tag  class is always the best

*. remember

display: none         block            inline             inline-block               flex

(visibility:hidden)   box-model                                  

                      height,width,
                      margin,padding,

                      content-box
                      inline-box


18. what is !important?

19. what is :not() for?

20. how to make button look flat?                             button { border:none } 

21. where to use vertical-align : middle ?                     inline-block  

22. 如何让 inline-block 中的元素即使页面变小也不换行？            width: calc(33% - 30px);

23. 常见button效果                                              cursor：pointer

24. how to eliminate the line when pressing a button?             outline:none

**25. 如何让垂直排列的元素变为横向排列？(组合)                      display: inline-block  width:33%
                                                                test-align:center (maybe)

**26. how to draw a circle ?                                   background-color: white;
                                                               height:30px;  width:30px;
                                                               border: 2px solid black;
                                                               border-radius: 50%;
                                                               margin:auto;
                                          
**remember:
  to centerlize something in parellel:
  picture:                                                     background-image    background-position
  text:                                                        text-align:center
  block/incline-block:                                         margin:5px auto(上下有空间)    vertical-align:middle
  flex:                                                        align-items: center  jusfity-content: center

  to centerlize something in vertical:

  padding and margin:    (height:50% 没有用）(使用 box-sizing: border-box 效果佳)
  position               (很方便)


27. 如果 a 中有很多元素 考虑 ：  display: block   (其他inline元素也同样如此)
   27.1 什么情况下a中有很多元素？                            我们希望整块面板都可以做超链接(project_4)

28. normal shadow？                                         box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); (project_4)

29. float 的本质是什么？                              将 element 悬浮在空中， 脱离原来的 elment flow (project_4)

30. 如何在使用 float 后修改原来的 element flow ？                  <div></div>         clear:both      (project_4)

31. position :  static (default)   absolute  relative  fixed   sticky 

    static:  (normal file flow)        no :    top   buttom   left  right  z-index

    relative: (normal file flow)       yes             other element miss   元素原属性不变（height，width, margin）

    abosulte: out of normal file flow  yes             other element miss   元素原属性变化（height，width,maring）
              (related to the closed not static parent element until window)

    fixed: out of normal               yes             other element miss  元素原属性变化（height，width,margin）
              (related to just window)

!!!注意: 仅设置 position：absolute、fixed  之后没有设置top buttom left right，       (project_6)
         element 的位置不具有参考意义

32. 为什么设置字体大小后，其容器也会发生相应的大小变化？                                (project_6)
    因为没有设置 padding


33. 悬浮 navigation bar                                                            (project_6)
    position: fixed  top:0  left: 0      
    box-sizing: border-box
    margin:0                                (position:fixed 之后margin需要重新设置)

34. 增加背景图片？
    <body>
       <div class="background"></div>
    .....
    </body>

    .background{
        background-image: url("../img/memories.png");
        position: fixed;
        height: 100%;
        width: 100%;
        z-index: -1;
        top:0;
        left:0;
    }

34.1  如何增加灰色蒙版？（project_7）
    <body>
       <div class="background"></div>
    .....
    </body>
     
    .background {
       background-color: rgba(0, 0, 0, 0.5);
       position: fixed;
       height: 100%;
       width: 100%;
       z-index: -1;
     }

     

35. **remember  (project_4)
    position:fixed                             制作  navigation bar，     background-image   
    position:absolute(配合relative)           制作  badge

36. overflow:hidden  作用
                                             parent 使用   overflow：hidden
                                             child  使用   position：relative 使用top left等之后，超出parent的部分不显示

37. 如何不用position：fixed/absolute 制作背景图片？  （project_5）

    1. 当使用  position：fixed/absolute 时，配合width（推荐 width：100%）即可显示图片（最好能有top，left等）
    2. 当使用  position：static/relative时，配合width，需要特别设置height 才能显示图片  

38，理解 background 各个属性的作用       （project_5）

    background-image              url()          linear-gradient()    radial-gradient()
    background-repeat
    background-size               100px      300px 100px      50%       contain    cover
                                 (自适应)     （整体调节）   （按比例调节）（确保图片显示）（确保全覆盖）

    background-position          similiar like （top left right buttom）
    background-attachment: scroll/fixed                   图片跟着滚轮滑动/固定不动
    background-origin: padding-box(default 独有)    content-box     border-box
    background-clip: padding-box       content-box  border-box

38.1  background 滤镜
     
      filter

39. 区分 background-origin   background-clip
    1. 将图片放入 padding，content，border 范围内，显示完整图片
    2. 将图片按照原图裁剪到 padding，content， border 大小，不保留剩余部分

** 设计理念：设计出两个水平的 block                (project_7)

   1. <div class="div_1">123</div>
      <div class="div_2">345</div>

   2.  .div_1{
         display: inline-block;
         vertical-align:middle;
         width: 50%;
       }

       .div_2{
         display: inline-block;
         vertical-align:middle;
         width: 50%;

       }

** remember:  inline-box 的两种使用：
                
            1. 用于 li   配合 padding/margin         project_3
            2. 用于 div  配合 width                  project_1 project_7

40. 计量单位

   1. pixel 

   2. %     position:   fixed (viewpoint)  absolute(parent)  static/relative(parent)

   3. em    相对于父类的 font-size

   4. rem （root-em）  相对于 html root element 的 font-size （默认 16px）

   5. vw, vh  相对于 viewpoint 的 1%

   6. vm      vw，vh中的较小值

what are these units use for ? 

   font-size     

   padding border margin

   width height

   top buttom  left right 

how to change the "font-size" in "root element"?

  html{
      font-size: 100%;        // 75%  50%                            
      //     1rem = 16px
  }


41. what is "max/min-width" and "max/min-height" use for ?

    when we made a responsive webpage, some element will be change with the change of the website, then we setup
    these two varibles to set a limitation of the change.

42. when change the "setting ----> appearance ----> font-size"             (project_8)
    "rem em" will change
    "px" won't 


** remember:  how to make webpage responsive?
  
  1. font-size:  em/rem (随着setting变化而变化)    vh/vw/vm  (随着高度/宽度/较小值变化而变化)   
  2. min/max width/height


43. how to solve "100% height" problem ?

    1.  100% height to all ancesters
    2.  position: fixed/absolute
    3.  use vw/vh


*44. 设计 “灰幕” + “选择框”， 并增加相应事件

     （project_1)


*45. 设计 sidebar，并制作为 responsive 事件

      (project_9)    (nav bar, side bar, backdrop 相互配合)


responsive setup:                                                            (project_9)

    <meta name="viewpoint" content="width=divice-width, initial-scale=1.9">

    make website indentify the view of cellphone or other hardware (default value for html:5)

media queries:

@media (max-width: 40rem) {
  .sidebar {
    display: block;
  }
  .backdrop {
    display: block;
  }
  .nav {
    display: none;
  }
} 

1. syntax 为 

   @media (breaking point){
      list the different varible
   }
2. we cam also setup multiple @media  (media queries)

3. for multiple conditions:

    @media (min-width: 40rem) and (min-height:60rem){

    }

4. other condition

   orientation: portrait /  landscape 
                (画面纵向时)  (画面横向时)


46. advanced selector

    [color = red]                   all                          color equals    "red"    
   a[color ~= red]                   a                           color contains  "red"
    [color *= red]                  all                          color contains  "red"
    [color ^= red]                  all                          color begins    "red"
   a[color |= red]                   a                           color begins or equals "red"
    [color $= red]                  all                          color ends      "red"


47. label 标签可以用于任何 input、textarea 等需要 focus 属性的 element 中     (project_10)
    只需要 label for 属性对应内容 和 相应的 input id 相同即可

    关于 label 标签 和 input 标签的顺序问题：
    input标签是带一定效果的，比如：input type=“text” 是一个输入框， input type=“checkbox” 是一个check框，
    label标签则代表效果之外的文字，
    因此，二者之间的顺序问题取决于“效果”和“文字”之间的顺序问题

    关于label 标签 和 input 标签的layout：
    二者的layout，包括 margin padding 等，是分开进行设置的。

    input 标签常见的 css event：
    hover，focus, invalid(validation feedback)

    如何改变输入框的边界？
    border outline


48. 4种 button (project_11)

    1. <input type = "button" />
       无javascript， 无event

    2. <input type = "submit" />
       无javascript，有event，除非用javascript 阻止

    3. <button>
        form 中也有动作，但按钮内容更加丰富，但有浏览器兼容问题
    
    4. <a> <img> <span> <div> 进行伪装
    
    原则： 1. form 中用type=submit，form外用type=button
          2. button 和 input 设置文字方法不同，前者为<button>....</button>，后者为<input type="" value="...">

49. -webkit-appearance：none     
    -moz-appearance：none

    -webkit-: safari + chrome
    -moz-   : firefox


50. 如何改变 input 行为？

    举例：  改变 checkbox 中 check 框的动作
    默认状态下，当点击checkbox时，check 框背景色变蓝，同时出现tip

    如何修改它？

    1. appearance： none 消除整个 check 框
    2. 设置 width height border，自己制作 check 框
    3. 设置 checked 动作，为 background-color：green

    结果：生成一个自定义的 check 框， 其动作为：选中后，背景色为绿色 


51. form validation feedback

    :invalid

52. 如何设置 button 使之失去作用？ 如何写出相应 selector 在 css ？

    <button disabled> 123 </button>    
    button[disabled]{

    }

53. google font

54. font-family
    font-weight
    font-style
    font-size
    font-variant: small-caps

    letter-spacing
    white-space：normal（default）
    line-height
    text-decoration
    text-shadow

    区分： line-height  vs     padding 


*** 55. display: flex 使用场景： 取代 display:inline-block   (project_12)


                            display: flex;

        Parent:                                              Children:

    flex-direction: row / row-reverse /                    order
                 column / column-reverse          

    flex-wrap: nowrap / wrap / wrap-reverse                flex-grow (responsive)

    ** flex-flow: row wrap (above two)                     flex-shrink (responsive)

    jusfity-content:                                       flex-basis （取代width，height 受限于max/min-width/height）
          flex-start  flex-end   center
          space-between    space-around                    align-self:
          space-evenly                                          auto / flex-start / flex-end /
                                                                center /  stretch / baseline
    align-items:
          flex-start  flex-end    center
          stretch
          baseline

    align-content:
          flex-start flex-end   center
          stretch
          space-between  space-around
    
    gap, row-gap, column-gap



56. 制作 header 对比 （proejct 13  vs  project 14）

    display：inline-block;
    display：flex;

    gap   vs    padding

57. z-index 使用范围

    1. position 不是 static, 例如：relative, absolute, fixed
    2. flex items


**58.  设计  

                                          3333333
       111111111            222222222                    44444444444            align-self:flex-start



       111111111     222222222                           333333333                flex:1;


*** 难题：

    看到：按钮和按钮外边框的距离，想到：padding



  59. grid (developer tools ---> layout)

     parent:                                                                      child:

     display: grid;

     grid-template-columns:[line1] 50% [line2] 50% [line3]                        grid-column: 1/2  (line1 to line2)

     grid-template-rows:[row1] 25% [row2] 25% [row3] 25% [row4] 25% [row5]        gird-row: 2/4 (line2 to line4)


     常用的表示距离的单位和效果包括： px,rem, repeat(3, 20px, [row1]), 1fr , auto, minmax(10px, 200px), span 
                                   fit-content(8rem)

     parent:                                                                  child:

     display: grid                                                grid-area: header

     grid-template-colomns: 200px 200px 200px 200px               grid-area:main

     grid-template-rows: auto                                     grid-area:sidebar

     grid-remplate-areas:                                         gird-area:footer
           "header header header header"
           "main main . sidebar"                                  place-self
           "footer footer footer footer"                          justify-self
                                                                  align-self
    缺点：不能出现横向不连续的相同 grid-area


    通用属性：
           parent：  gap                                             child:
                     row-gap                                              grid-column-start: [line-name]/area number
                     column-gap                                           grid-column-end:

                     place-items                                          grid-row-start:
                     justify-items                                        grid-row-end:
                     align-items
                                                                          z-index
                     place-content
                     justify-content
                     align-content

                     grid-auto-flow: row/column


51. transform

1. rotate move skew scale

2. 3D transform
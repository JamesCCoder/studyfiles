1. onChange 从 e 里面实时get数据， onClick 则是从value中获取数据

onChange = {(e) => setValue(e.target.value)}           from child to child
onClick = {() => {getValue(value)}}                    from child to parent

onClick = {() => {getValue(another)}}                  from child to child

子类到子类的非实时数据传递，方法：设置另外一个数据，点击赋值即可


2. 练习：

   data 传输： 1. parent -> child   2. child -> child
   方式： 1. App.js 位置组合 2. parent，child 单独组合
   方法： 1. props，useState  2. useContext


3. disabled === {value.length === 0}
   {value && <p>The senteance is here</p>}

   按钮的显示/隐藏 和 某行文字是不一样的


4. 同一个 onClick 下绑定多个event

   onChange={(e) => {setValue(e.target.value);getValue(e.target.value)}

   或者：

   onClick = ((e) => changeHandler(e));

   const changeHandler = (e) =>{
       setValue(e.target.value);
       getValue(e.target.value);
   }


5. useEffect 与 useContext 的几点异同

   1. 在引用时相同

      value = {value}
      onClick = {(e) => getValue(e.target.value)}

   2. 传递时不同

      <Child value={value}/>
      <Parent getValue = {getValue}></Parent>

      <myContext.Provider value={{value, getValue}}>

    3. 使用时不同
      
      const Child = ({value}) => {}
      const Parent = {children, getValue} =>{}

      const {value} = useContext(myContext);

6. 对array数据增加id后变为obj，再进行map后显示在li中
   对复杂的obj属性进行筛选，挑选出需要的属性，再增加id组成新的obj，再利用li进行显示。


7. counter

   1. 单个 App.js function
   2. 单个 App.js class
   3. component function
   4. component class

                class Content extends React.Component {
                     render(){
                         return(
                            <p>The num is :{this.props.value}</p>
                         )

                     }

                 }
                export default Content;

                class Button extends React.Component{
                     render(){
                         return ( <>
                             <button onClick={() => this.props.addHandler(this.props.value)}>add</button>
                         </> );
                     }
                }
               export default Button;

               class App extends React.Component{

                constructor(props){
                    super(props);
                    this.state={
                         value:0,
                    }
                }
  
               addHandler = () =>{
                     this.setState({
                       value: this.state.value + 1,
                     })
               }

               render(){
                return ( 
                       <>
                         <Content value={this.state.value}/>
                         <Button value={this.state.value} addHandler={this.addHandler}/>
                       </>);
                }
               }
               export default App;


   5. component useContext
   6. component Context API ?
   6. component redux
1. react is a javascript library 

2. Core of React: virtural DOM 
   ----> reusable component
         single page application (server only sends one html file)

3. basic sytax:

   1.for basic component:                            2. for css file:

   import React from "react";
   import "./ExpenseItem.css";                       .overall{           .first{

   const ExpenseItem = (props) => {                  }                   }
   
   return (
    <div className="overall">
      <p className="first">{props.time}</p>
      <p className="second">{props.name}</p>
      <p className="third">{props.price}</p>
    </div>
  );
};

   export default ExpenseItem;
   

   3. for parent                                       

    import ExpenseItem from "../ExpenseItem.js";

    function App() {
  
    return (
      <>
        <ExpenseItem/>
      </>
    );
  });
}

     export default App;


  4. for data file:                                    

  export const Data = [                              
  {
    id: 1,                                             
    name: "a",
    time: "Mar 28th, 2021",
    name: "Car Insurance",
    price: "$294.67",
  },
  {
    id: 2,
    name: "b",
    time: "Apr 21th, 2021",
    name: "Body Insurance",
    price: "$123.67",
  },
  {
    id: 3,
    name: "c",
    time: "Apr 21th, 2021",
    name: "Insurance",
    price: "$123.67",
  },
];


how to import a set of data:   (import and filter data)

import { Data } from "./data/Data.js";

function App() {
  return Data.map((oneData) => {
    const { time, name, price } = oneData;
    return (
      <>
        <ExpenseItem time={time} name={name} price={price} />
      </>
    );
  });
}

4. props.children 用法
   const names = props.className;


5. 掌握要点：
   1. 如何将某一个 component 中的一部分变为另一个 component
   2. 如何从 component 的套嵌结构中设计出共有部分（举例：UI）
   overall: 1. props 向下转移 
            2. css 向下（或者向UI）
   
   掌握要点：
   1.如何将某一层引用的 data 向上一层转移
     要点： 1. 更上一层引用（import data）
            2. children 利用 props, 例如：const {name} = Data  ==>   const {name} = props
             3. parent 利用新的引用  例如： Data = {Data} 或者 Name = {Name}

6. label for  =>  label htmlFor

7. form 设计要点：
    1. form 包括两部分： input 和 button
    2. input 总有 label 进行包裹，作为文字部分
    3. 每个 input + label 和 button 都作为 独立个体 被 div 包裹，方便格式调整
    4. 注意 input 的 type 多样性

    关于 form 的event：
    1. input 对应方法为 onChange， button（input）无方法， form 对应方法为 onSubmit
       onChange 利用 e.target.value 接受 input 发生的变化
    2. input 对应数值为 value, 进行双向绑定.
    3. 用 onSubmit 将 onChange 接收到的数据总结为一组数据
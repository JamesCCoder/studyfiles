1. react is a javascript library 

2. Core of React: virtural DOM 
   ----> reusable component
         single page application (server only sends one html file)

3. basic sytax:

   1.for basic component:                            2. for css file:

   import React from "react";
   import "./ExpenseItem.css";                       .overall{           .first{

   const ExpenseItem = (props) => {                  }                   }
   
   return (
    <div className="overall">
      <p className="first">{props.time}</p>
      <p className="second">{props.name}</p>
      <p className="third">{props.price}</p>
    </div>
  );
};

   export default ExpenseItem;
   

   3. for parent                                       

    import ExpenseItem from "../ExpenseItem.js";

    function App() {
  
    return (
      <>
        <ExpenseItem/>
      </>
    );
  });
}

     export default App;


  4. for data file:                                    

  export const Data = [                              
  {
    id: 1,                                             
    name: "a",
    time: "Mar 28th, 2021",
    name: "Car Insurance",
    price: "$294.67",
  },
  {
    id: 2,
    name: "b",
    time: "Apr 21th, 2021",
    name: "Body Insurance",
    price: "$123.67",
  },
  {
    id: 3,
    name: "c",
    time: "Apr 21th, 2021",
    name: "Insurance",
    price: "$123.67",
  },
];


how to import a set of data:   (import and filter data)

import { Data } from "./data/Data.js";

function App() {
  return Data.map((oneData) => {
    const { time, name, price } = oneData;
    return (
      <>
        <ExpenseItem time={time} name={name} price={price} />
      </>
    );
  });
}

4. props.children 用法
   const names = props.className;


5. 掌握要点：
   1. 如何将某一个 component 中的一部分变为另一个 component
   2. 如何从 component 的套嵌结构中设计出共有部分（举例：UI）
   overall: 1. props 向下转移 
            2. css 向下（或者向UI）
   
   掌握要点：
   1.如何将某一层引用的 data 向上一层转移
     要点： 1. 更上一层引用（import data）
            2. children 利用 props, 例如：const {name} = Data  ==>   const {name} = props
             3. parent 利用新的引用  例如： Data = {Data} 或者 Name = {Name}

6. label for  =>  label htmlFor

7. form 设计要点：
    1. form 包括两部分： input 和 button
    2. input 总有 label 进行包裹，作为文字部分
    3. 每个 input + label 和 button 都作为 独立个体 被 div 包裹，方便格式调整
    4. 注意 input 的 type 多样性

    关于 form 的event：
    1. input 对应方法为 onChange， button（input）无方法， form 对应方法为 onSubmit
       onChange 利用 e.target.value 接受 input 发生的变化
    2. input 对应数值为 value, 进行双向绑定.
    3. 用 onSubmit 将 onChange 接收到的数据总结为一组数据
    4. 用 e.preventDefault() 阻止 button（input）的默认事件


8. 数据从上到下的引用和再加工：

   要点：1. props
         2.  const {name, age, sex} = props/Data, 进行 data filter

  数据从下到上的引用和再加工：

   要点：1. 父类写一个 用于“引用数据”的 function   onSavedData = {onSavedDataHandler}
         2. onSaveData 利用 props 在子类中使用： props.onSavedData("onSubmit中get到的数据")
         3. onSavedDataHandler 在父类中使用，用于加工数据
              const onSavedDataHandler = (data) => {
                const newData = {
                  ...data,                               ==> 获取数据
                  id: Math.random().toString(),
                }
                 console.log(newData);                   
              }

9. 无加工的向下引用：

   parent：    Data = {Data}

   child：     props
               const {Data} = props
               Data = {Data}
   
   child：     props
               const {name， age，sex} = props                        ===> data filter (难点：数据转换)
                                                                (*容易遗忘：利用set中的pre不断添加新数据)
                                                                (**对比：1.给每个数据添加一个id)
                                                                （2. 每次 (在原数据基础上) 添加一组数据）    
                                                             1. setNewData = (...)([...oldData, gettedNewData])
                                                             2. setNewData = (...)([...pre, modifiedNewData])

   无加工的向上引用：

   parent：    getData = {getDataHandler}
                         
                         const getDataHandler = (data) => {
                             const newData = {
                                 ...data,
                             }
                             console.log(newData);
                         }

   child:      props
               props.getData("gettedData")

10. select 如何传递和 handle 数据,进而进行filter

    1. select 的选项，即每一个 option 需要设置 value，option的 content 是2020，则 value 设置为2020，以此类推
    2. select 准备两个变量 value，和 onChange，做双向绑定的准备（和input完全一样）
    3. value 和 onChange 用 useState 连接，关联数据使用 e.target.value 进行引用（和input完全一致）
    4. 经过以上步骤，已经成功handle到了option中的数据，接下来我们需要将数据传递到下一层进行filter
    5. 使用 YearNumber = {YearNumber} 进行传递
    6. 在子类中使用 “filter” 进行 filter（注意syntax）
       const { OldData, YearNumber } = props;
       const Data = OldData.filter((oneOldData) => {
             return oneOldData.year == YearNumber;
       });

11. 对数据进行同级（不向上或者向下）filter:

    Data: id, name, age, sex, time, year...        but we only need: id, name age

    const newData = Data.map((oneData) => {
        const {id, name, age} = oneData;
        return {id, name, age};
    })

12. 好习惯：

    在做完 string 转化 （例如： Mar 11， 2033 进行 “，” 的split）之后多使用 trim（）保证数据的精确


13. date 的转换：

    1. 直接通过 input type="date" get到的数据为 2020-05-21
    2. 转化为 "may 21, 2020" 的形式
       (1). 转化为 timestamp 
       const date = new Date(e.target.value);
       (2). 进一步转化
       const date_1 = date.toLocaleString("en-US", {month: "short",}) +
        " " +
        date.getDay() +
        "," +
        date.getFullYear();
      
      注意：1. getDay（）方法之间必须加入其他符号，否则数据会被覆盖
            2. getDay（）等方法获取的是数字，如果需要字母，则需要 toLocaleString（）方法
            
14. * 自下朝上加工数据

      在 child 得到的数据为 ：   {name: "a", amount:1, sex:"male"}

      现在需要在 parent 加入 id：    
           1. parent 写入方法：
                    getData = getDataHandler(Data)

                    const getDataHandler = (Data) => {
                         const newData = {
                            ...Data,
                            id: Math.random(),
                         }
                    }
           2. child 写入引用

                    props

                    props.getData("getted Data");


      原始数据为 array：   [{},{},{}]
      
      现在get到一个 {} ，如何添加到 array 里面？

                  const newArray = (newObject) => {
                      return [...oldArray, newOblect];
                  }

      不断加入新数值： 
                    const newArray = (newObject) => {
                       setNewArray(...pre, newObject);
                    }   

       注意： pre 关键字只有在 useState 中的 “set”里才会有
               
15. child  --->   child  ---->   child   ------> parent(root)
    props.event   event                                         -----
                                                                    | -->   useState
    child  <---  child   <-----  child   <------- parent(root)  -----                         
    porps          props


16. filter 不到数据的情况

    if(newData.length === 0 ){
      return <p>Nothing found</p>
    }else{
      return newData.map(oneData => {
          return ...
      })
    }

17. 程序设计：

    一个 block，上面显示“一个按钮”，点击之后，按钮消失，生成三个“输入框”

    设计：1.一个parent，作为“按钮”或者“输入框” children 的载体
         2. 两个 child，一个设计一个按钮，一个设计三个“输入框”

    原理：1. 有按钮的 child 在按钮上设计onClick事件，获得点击变量 false -> true
          2. 将获得的变量传递到 parent: virable
          3. parent 设计 conditional statement：
            <parent>
             {!virable && component_1}
             {virable && component_2}
            </parent>

18. 关于 array 的渲染

    在对 array 进行 element 渲染时， 我们常用 map 函数进行，但在使用 map 函数前，我们需要先用 return
    再进行 map，
    再 map 后再使用一次 return

    const DeleteComponent = (props) => {
    const { content } = props;

    return content.map((oneContent) => {
      return (
        <div className="outer">
          <p className="content">{oneContent}</p>;
        </div>
      );
    });
  };

19. validation effect

    1. 无效的字母输入 （长度为0）
       设置变量： valid，setValid (handle 数据的那一层 component)
       如果"长度为0"，则 valid 由 true --->  false
    
       1.利用 inline 设置 css属性:{{borderColor: !isValid ? "red" : "black", bakcground: !isValid ? "red" : "black" }}
       2.利用 css 文件属性的动态命名

**20. react_project_2 问题

      valid 和 background 有一个回合的延迟

      原因： 向上传递慢
      解决方法： 把 notvalid component 在 upcomponent 一个层级

21. 关于 react_project_3

      input 中的 useState 可以用 useRef 替代：
      
      1. useState

input：onChange  value -> dataOne      const [valueOne, setValueOne] = useState("");   
form： onSubmit


onChange ---> setValueOne
       
onSubmit  ---> setDataOne                         props.getData(dataOne)              

        

      2. useRef

input: ref = {dataSecondHandler}       const dataSecondHandler = useRef();
form: onSubmit

onSubmit  ---> setDataOne                         props.getData(dataSecondHandler.current.value);           
         

23. 如何利用 useEffect 监视 side effect，从而实现对输入有效性的判断？

   const [isValid, setIsValid] = useState(true);          定义 isValid， 并实现对 css 的 conditional

    useEffect(() => {
    const timing = setTimeout(() => {
      setValid(valueOne.length > 0);                  将判断条件写在 useEffect 里面
    },200);

    return () => {
      clearTimeout(timing);                          setTimeout 和 clearTimeout(配合return) 是为了 cleanup
    }                                                多余的验证次数
    
    },[setValid, valueOne]);

    注意：useRef 无法和 useEffect 配合使用

    关于 dependency:
    1. 没有 dependency                           任何改变都 trigger
    2. []                                        仅在页面载入时 trigger
    3. [varible, function...]                     在[]中 variable/function 发生改变时 trigger

常见输入内容格式判断：

    1. e.target.value.length > 0
    2. e.target.value.includes("@")
    3. enteredContent.trim().length > 6
    4. typeof value === "number"

24. useReducer

    alternative/replacement to "useState"


          useState                                                 useReducer

 
  const [value, setValue] = useState(0);                     const init = 0;
                                                             const reducer = (state, action) => {
                                                                  switch (action){
                                                                         case "add":
  const pressHandler = () => {                                                return state + 1;
    setValue((pre) => {                                                  default:
        return pre + 1;                                                       return state;
    })                                                            }
  }                                                          }

  <p> {value} </p>                                           const [value, dispatch] = useReducer(reducer, init);
  <button onClick = {pressHandler}> press </button>

                                                             <p> {value} </p>
                                                             <button onClick = {() => dispatch("add")} > press </button>

25. when to use useState and when to use useReducer ?

    useState : independent numbers

    useReducer: for the numbers those are depend on other numbers